<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://hevia.github.io/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://hevia.github.io/blog/" rel="alternate" type="text/html" /><updated>2021-05-23T12:58:34-05:00</updated><id>https://hevia.github.io/blog/feed.xml</id><title type="html">Programming &amp;amp; Public Policy</title><subtitle>Personal blog for Anthony Hevia</subtitle><entry><title type="html">Deploying Prodigy to Azure using Docker</title><link href="https://hevia.github.io/blog/python/nlp/prodigy/azure/postgresql/docker/2021/05/23/deploying-prodigy-to-azure.html" rel="alternate" type="text/html" title="Deploying Prodigy to Azure using Docker" /><published>2021-05-23T00:00:00-05:00</published><updated>2021-05-23T00:00:00-05:00</updated><id>https://hevia.github.io/blog/python/nlp/prodigy/azure/postgresql/docker/2021/05/23/deploying-prodigy-to-azure</id><author><name></name></author><category term="python" /><category term="nlp" /><category term="prodigy" /><category term="azure" /><category term="postgresql" /><category term="docker" /><summary type="html">Introduction This is a quick guide on how to deploy Explosion‚Äôs data annotation tool Prodigy. This guide is meant as a reference &amp;amp; assumes you know how to use Docker, Azure, and you know how to deploy/provision a database.</summary></entry><entry><title type="html">Concurrency &amp;amp; Parallelism with Python in 5 minutes</title><link href="https://hevia.github.io/blog/python/concurrency/parallelism/multithreading/2021/05/15/Intro-to-concurrency-and-parallelism-with-Python.html" rel="alternate" type="text/html" title="Concurrency &amp;amp; Parallelism with Python in 5 minutes" /><published>2021-05-15T00:00:00-05:00</published><updated>2021-05-15T00:00:00-05:00</updated><id>https://hevia.github.io/blog/python/concurrency/parallelism/multithreading/2021/05/15/Intro-to-concurrency-and-parallelism-with-Python</id><author><name></name></author><category term="python" /><category term="concurrency" /><category term="parallelism" /><category term="multithreading" /><summary type="html">Introduction üèÉüèΩ‚Äç‚ôÄÔ∏è One of the best next steps you can take on your Python journey is diving into concurrency &amp;amp; parallelsim. Many developers will often learn enough to get by, but you can spend your entire career in this space! There are a lot of exciting things to learn, but newcomers can often feel intimadated by the steep curve. In this series of short posts I am hoping we can distill these topics so you can start writing more performant Python üöÄüêç</summary></entry><entry><title type="html">Today I Learned</title><link href="https://hevia.github.io/blog/til/2021/05/04/Today-I-Learned.html" rel="alternate" type="text/html" title="Today I Learned" /><published>2021-05-04T00:00:00-05:00</published><updated>2021-05-04T00:00:00-05:00</updated><id>https://hevia.github.io/blog/til/2021/05/04/Today-I-Learned</id><author><name></name></author><category term="TIL" /><summary type="html">May 13th, 2021 üõ¥ Service Workers operate on threads separate from main Service workers required HTTPS to be used ServiceWorkers + CacheStorage is what helps lead to such huge performance gains You can invalidate an old service worker cache by adopting a new name The cache used by service workers is separate from the browser cache iframes use their own browsing context which requires increased memory from the browser Service Workers are excuted in a ServiceWorkerGlobalScope context that have no access to DOM Service workers cannot be used when the user is in private browsing mode You have control over the cache lifetime for your site/service workers You can register service workers to listen for certain events (such as fetch) and whenever the client emits that event, the service workers will intercept the request &amp;amp; perform the work. You can then cache the result You can have the client install new service workers by also updating the associated cache version ServiceWorkers also enable push notifications &amp;amp; background sync APIs</summary></entry></feed>